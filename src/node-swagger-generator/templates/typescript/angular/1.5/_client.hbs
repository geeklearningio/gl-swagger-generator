export class {{options.clientName}}{{#if options.generateInterface}} implements I{{options.clientName}}{{/if}} {
private baseUri: string;
private hostName: string;
private scheme: string;

/* @ngInject */
constructor(
{{#options.inject}}
    private {{name}}: {{type}},
{{/options.inject}}
private $http: angular.IHttpService
) {
this.hostName = '{{#options.host.override}}{{.}}{{/options.host.override}}{{#unless
        options.host.override}}{{api.host}}{{/unless}}';
{{#options.host.set}}
    if ({{.}}) {
    this.hostName = {{.}};
    }
{{/options.host.set}}
this.scheme = '{{#options.scheme.override}}{{.}}{{/options.scheme.override}}{{#unless
        options.scheme.override}}http{{/unless}}';
{{#options.scheme.set}}
    if ({{.}}) {
    this.scheme = {{.}};
    }
{{/options.scheme.set}}
this.baseUri = this.scheme + '://' + this.hostName {{#api.basePath}}+ '{{.}}'{{/api.basePath}};
}

{{#api.operations}}
    /**
    * {{description}}
    {{#args}}
        * @param { {{> type}} } {{camlCase name}} {{description}}
    {{/args}}
    * @return { {{> type successsResponse}} } {{successResponse.title}}
    */
    {{name}}(
    args: I{{pascalCase name}}Args,
    canceller?: angular.IDeferred<any>
        ) : angular.IHttpPromise<{{> type successResponse.[0]}}> {

        var uri = this.baseUri + {{#pathSegments}}{{#isParam}}{{#if @first}}'/' + {{/if}}{{#unless @first}}' + {{/unless}}String(args.{{camlCase name}}){{#unless @last}} + '{{/unless}}{{/isParam}}{{#unless isParam}}{{#if @first}}'{{/if}}{{name}}{{#unless @last}}{{/unless}}{{#if @last}}'{{/if}}{{/unless}}{{/pathSegments}};

        var httpRequestParams: any = {
            method: '{{verb}}',
            url: uri,
            json: true,
        {{#requestBody}}
            data: args.{{camlCase name}},
        {{/requestBody}}
        {{#if @root.options.defaultTimeout}}
            timeout: {{@root.options.defaultTimeout}},
        {{/if}}
            params: {
        {{#query}}
                '{{name}}': args.{{camlCase name}}{{#unless @last}},{{/unless}}
        {{/query}}
            },
            headers: {
        {{#headers}}
                '{{name}}': args.{{camlCase name}}{{#unless @last}},{{/unless}}
        {{/headers}}
            }
        };

    {{#isFormDataRequest}}
            var formData = new FormData();
        {{#formData}}
            {{#getType this}}
                {{#if isFile}}
                        formData.append('{{../name}}', new Blob([ args.{{camlCase ../name }} ], {type: 'application/octet-stream'}));
                {{/if}}
                {{#unless isFile}}
                        formData.append('{{../name}}', args.{{camlCase ../name}});
                {{/unless}}
            {{/getType}}
        {{/formData}}
            httpRequestParams.data = formData;
            httpRequestParams.transformRequest = data => data;
            httpRequestParams.headers['Content-Type'] = undefined;
    {{/isFormDataRequest}}

        if (canceller){
            httpRequestParams.timeout = canceller.promise;
        }

    {{#mapLookup @root.options.security security}}
        {{#configure}}
                httpRequestParams = this.{{.}}(httpRequestParams);
        {{/configure}}
    {{/mapLookup}}

        return this.$http(httpRequestParams);
        }

{{/api.operations}}
    }
