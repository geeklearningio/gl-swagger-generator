namespace {{options.rootNamespace}} {
    using GeekLearning.RestKit.Core;
    using Microsoft.Extensions.Options;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;
    {{> using}}

    public class {{options.clientName}}: ClientBase<{{options.clientName}}Options>{{#if options.generateInterface}}, I{{options.clientName}}{{/if}} {
        private string baseUri;
        private HttpClient httpClient;
        private JsonSerializerSettings settings;

    {{#options.inject}}
        private {{type}} {{name}};
    {{/options.inject}}

    public {{options.clientName}}(
        IOptions<{{options.clientName}}Options> options,
        IMediaFormatterProvider mediaFormatterProvider
    {{#options.inject}},
        {{type}} {{name}}
    {{/options.inject}}
    ) : base(options, mediaFormatterProvider) {
    {{#options.inject}}
        this.{{name}} = {{name}};
    {{/options.inject}}
        this.httpClient = new HttpClient();
        this.baseUri = string.Concat(this.Options.Scheme, "://", this.Options.HostName {{#api.basePath}}, "{{.}}"{{/api.basePath}});
        this.settings = new JsonSerializerSettings();
        this.settings.DateFormatHandling = DateFormatHandling.IsoDateFormat;
    }

    {{#api.operations}}
        /// <summary>
        /// {{description}}
        {{#args}}
        /// <param name="{{camlCase name}}">{{description}}</param>  
        {{/args}}
        /// <returns>{{successResponse.title}}</returns>
        /// </summary>
        public async Task<{{> type successResponse.[0]}}> {{pascalCaseOverwriteCasing verb}}{{#pathSegments}}{{#isParam}}By{{/isParam}}{{pascalCase name}}{{/pathSegments}}(
        {{#args}}
            {{> type}} {{camlCase name}}{{#if optional}} = default({{> type}}){{/if}},
        {{/args}}
            CancellationToken cancellationToken = default(CancellationToken)
            ) {

            var uri = this.baseUri + {{#pathSegments}}{{#isParam}}{{#unless @first}}" + {{/unless}}{{name}}.ToString(){{#unless @last}} + "{{/unless}}{{/isParam}}{{#unless isParam}}{{#if @first}}"{{/if}}{{name}}{{#if @last}}"{{/if}}{{/unless}}{{/pathSegments}};

        {{#if query}}
            uri = AddQueryString(uri, new Dictionary<string, object>() {
            {{#query}}
                ["{{name}}"] = {{camlCase name}}{{#unless @last}},{{/unless}}
            {{/query}}
            });
        {{/if}}


            var message = new HttpRequestMessage();
            message.RequestUri = new Uri(uri, UriKind.Absolute);
            message.Method = new HttpMethod("{{verb}}");
            message.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("{{produces.[0]}}"));
        {{#requestBody}}
            message.Content = this.TransformRequestBody({{camlCase name}}, "{{../consumes.[0]}}");
        {{/requestBody}}

        {{#headers}}
            message.Headers.Add("{{name}}", SafeToString({{camlCase name}}));
        {{/headers}}

        {{#isFormDataRequest}}

        {{/isFormDataRequest}}

            message = this.ApplyFilters(message{{#security}}, "{{this}}"{{/security}});

            var response = await httpClient.SendAsync(message, cancellationToken);

            var content = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode){
                return await this.TransformResponseAsync<{{> type successResponse.[0]}}>(response);
            } else {
                throw new UnhandledApiException(response);
            }
        }
    {{/api.operations}}
    }
}